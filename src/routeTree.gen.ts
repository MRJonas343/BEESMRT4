/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PrivateDashboardImport } from './routes/_private/dashboard'
import { Route as GameMemoryGameSingleModeMemory1vs1Import } from './routes/game/_memoryGame/singleMode/memory1vs1'
import { Route as GameMemoryGame1vs1ModeMemoryImport } from './routes/game/_memoryGame/1vs1Mode/memory'
import { Route as GameHangmanGameSingleModeHangmanImport } from './routes/game/_hangmanGame/singleMode/hangman'
import { Route as GameHangmanGame1vs1ModeHangman1vs1Import } from './routes/game/_hangmanGame/1vs1Mode/hangman1vs1'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/_public/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PrivateDashboardRoute = PrivateDashboardImport.update({
  id: '/_private/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const GameMemoryGameSingleModeMemory1vs1Route =
  GameMemoryGameSingleModeMemory1vs1Import.update({
    id: '/game/_memoryGame/singleMode/memory1vs1',
    path: '/game/singleMode/memory1vs1',
    getParentRoute: () => rootRoute,
  } as any)

const GameMemoryGame1vs1ModeMemoryRoute =
  GameMemoryGame1vs1ModeMemoryImport.update({
    id: '/game/_memoryGame/1vs1Mode/memory',
    path: '/game/1vs1Mode/memory',
    getParentRoute: () => rootRoute,
  } as any)

const GameHangmanGameSingleModeHangmanRoute =
  GameHangmanGameSingleModeHangmanImport.update({
    id: '/game/_hangmanGame/singleMode/hangman',
    path: '/game/singleMode/hangman',
    getParentRoute: () => rootRoute,
  } as any)

const GameHangmanGame1vs1ModeHangman1vs1Route =
  GameHangmanGame1vs1ModeHangman1vs1Import.update({
    id: '/game/_hangmanGame/1vs1Mode/hangman1vs1',
    path: '/game/1vs1Mode/hangman1vs1',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof rootRoute
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof rootRoute
    }
    '/game/_hangmanGame/1vs1Mode/hangman1vs1': {
      id: '/game/_hangmanGame/1vs1Mode/hangman1vs1'
      path: '/game/1vs1Mode/hangman1vs1'
      fullPath: '/game/1vs1Mode/hangman1vs1'
      preLoaderRoute: typeof GameHangmanGame1vs1ModeHangman1vs1Import
      parentRoute: typeof rootRoute
    }
    '/game/_hangmanGame/singleMode/hangman': {
      id: '/game/_hangmanGame/singleMode/hangman'
      path: '/game/singleMode/hangman'
      fullPath: '/game/singleMode/hangman'
      preLoaderRoute: typeof GameHangmanGameSingleModeHangmanImport
      parentRoute: typeof rootRoute
    }
    '/game/_memoryGame/1vs1Mode/memory': {
      id: '/game/_memoryGame/1vs1Mode/memory'
      path: '/game/1vs1Mode/memory'
      fullPath: '/game/1vs1Mode/memory'
      preLoaderRoute: typeof GameMemoryGame1vs1ModeMemoryImport
      parentRoute: typeof rootRoute
    }
    '/game/_memoryGame/singleMode/memory1vs1': {
      id: '/game/_memoryGame/singleMode/memory1vs1'
      path: '/game/singleMode/memory1vs1'
      fullPath: '/game/singleMode/memory1vs1'
      preLoaderRoute: typeof GameMemoryGameSingleModeMemory1vs1Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/game/1vs1Mode/hangman1vs1': typeof GameHangmanGame1vs1ModeHangman1vs1Route
  '/game/singleMode/hangman': typeof GameHangmanGameSingleModeHangmanRoute
  '/game/1vs1Mode/memory': typeof GameMemoryGame1vs1ModeMemoryRoute
  '/game/singleMode/memory1vs1': typeof GameMemoryGameSingleModeMemory1vs1Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/game/1vs1Mode/hangman1vs1': typeof GameHangmanGame1vs1ModeHangman1vs1Route
  '/game/singleMode/hangman': typeof GameHangmanGameSingleModeHangmanRoute
  '/game/1vs1Mode/memory': typeof GameMemoryGame1vs1ModeMemoryRoute
  '/game/singleMode/memory1vs1': typeof GameMemoryGameSingleModeMemory1vs1Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_private/dashboard': typeof PrivateDashboardRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/game/_hangmanGame/1vs1Mode/hangman1vs1': typeof GameHangmanGame1vs1ModeHangman1vs1Route
  '/game/_hangmanGame/singleMode/hangman': typeof GameHangmanGameSingleModeHangmanRoute
  '/game/_memoryGame/1vs1Mode/memory': typeof GameMemoryGame1vs1ModeMemoryRoute
  '/game/_memoryGame/singleMode/memory1vs1': typeof GameMemoryGameSingleModeMemory1vs1Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/game/1vs1Mode/hangman1vs1'
    | '/game/singleMode/hangman'
    | '/game/1vs1Mode/memory'
    | '/game/singleMode/memory1vs1'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/game/1vs1Mode/hangman1vs1'
    | '/game/singleMode/hangman'
    | '/game/1vs1Mode/memory'
    | '/game/singleMode/memory1vs1'
  id:
    | '__root__'
    | '/'
    | '/_private/dashboard'
    | '/_public/login'
    | '/_public/register'
    | '/game/_hangmanGame/1vs1Mode/hangman1vs1'
    | '/game/_hangmanGame/singleMode/hangman'
    | '/game/_memoryGame/1vs1Mode/memory'
    | '/game/_memoryGame/singleMode/memory1vs1'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateDashboardRoute: typeof PrivateDashboardRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
  GameHangmanGame1vs1ModeHangman1vs1Route: typeof GameHangmanGame1vs1ModeHangman1vs1Route
  GameHangmanGameSingleModeHangmanRoute: typeof GameHangmanGameSingleModeHangmanRoute
  GameMemoryGame1vs1ModeMemoryRoute: typeof GameMemoryGame1vs1ModeMemoryRoute
  GameMemoryGameSingleModeMemory1vs1Route: typeof GameMemoryGameSingleModeMemory1vs1Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateDashboardRoute: PrivateDashboardRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
  GameHangmanGame1vs1ModeHangman1vs1Route:
    GameHangmanGame1vs1ModeHangman1vs1Route,
  GameHangmanGameSingleModeHangmanRoute: GameHangmanGameSingleModeHangmanRoute,
  GameMemoryGame1vs1ModeMemoryRoute: GameMemoryGame1vs1ModeMemoryRoute,
  GameMemoryGameSingleModeMemory1vs1Route:
    GameMemoryGameSingleModeMemory1vs1Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_private/dashboard",
        "/_public/login",
        "/_public/register",
        "/game/_hangmanGame/1vs1Mode/hangman1vs1",
        "/game/_hangmanGame/singleMode/hangman",
        "/game/_memoryGame/1vs1Mode/memory",
        "/game/_memoryGame/singleMode/memory1vs1"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_private/dashboard": {
      "filePath": "_private/dashboard.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx"
    },
    "/game/_hangmanGame/1vs1Mode/hangman1vs1": {
      "filePath": "game/_hangmanGame/1vs1Mode/hangman1vs1.tsx"
    },
    "/game/_hangmanGame/singleMode/hangman": {
      "filePath": "game/_hangmanGame/singleMode/hangman.tsx"
    },
    "/game/_memoryGame/1vs1Mode/memory": {
      "filePath": "game/_memoryGame/1vs1Mode/memory.tsx"
    },
    "/game/_memoryGame/singleMode/memory1vs1": {
      "filePath": "game/_memoryGame/singleMode/memory1vs1.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
